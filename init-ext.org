#+TITLE: Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything

* File Structure

  This configuration is built using Org-Babel such that it can be
  documented and coded in the literate style.

  Inspired and liberally copied from John Eastman's configuration.

* File Header

  Add some comments to the beginning of the generated elisp file.

  #+BEGIN_SRC emacs-lisp :padline no
    ;;; init-ext.el -- Automatically generated initialization file
    ;;;
    ;;; This file is generated based on the init-ext.org file.
    ;;; Please see that file for complete documentation.
    ;;;
    ;;; Commentary:
    ;;; See init-ext.org
    ;;;
    ;;; Code:
    ;;;
  #+END_SRC

* Early loading

  These items need to be setup early in the Emacs loading process.

** Prefer newer

   In an effort to reduce the risk of loading outdated byte code files, set
   =load-prefer-newer= to =t=. Starting with Emacs version 24.5,
   =load-prefer-newer= can prevent outdated byte code files from being
   loaded. However, there is still a possibility that a source file would
   not be re-compiled. =auto-compile= works to fill this gap.

   #+BEGIN_SRC emacs-lisp
     (setq load-prefer-newer t)
   #+END_SRC

** Auto compilation

   Ensure we are always using the latest code. =auto-compile= ensures that
   source files are recompiled if newer than their compiled form.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :demand t
       :ensure t
       :config
       (progn
	 (auto-compile-on-load-mode)
	 (auto-compile-on-save-mode)))
   #+END_SRC

** Variable definitions

   Some variables require being defined early on due to use in other modules.

   #+BEGIN_SRC emacs-lisp
     (defvar jme:helm-sources '(helm-source-buffers-list
				helm-source-recentf
				helm-source-bookmarks
				helm-source-file-cache
				helm-source-files-in-current-dir))
   #+END_SRC

* General Configuration
** Exec path

   Pull the exec path from our shell, this ensures all of the binaries we
   expect are available to us.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :if (memq window-system '(mac ns x))
       :ensure t
       :config
       (progn
         (when (string-match-p "/zsh$" (getenv "SHELL"))
           ;; use an non-interactive login shell to ensure
           ;; zsh path is loaded properly from .zprofile
           ;; which only loads with login shell.
           (setq exec-path-from-shell-arguments '("-l")))
         (exec-path-from-shell-initialize)))
   #+END_SRC

** Library Paths

   Everything is situated underneath =user-emacs-directory (~/.emacs.d)=

   This makes everything self-contained and easy to migrate to other
   environments.

   This section contains all of the path configurations that are not
   machine specific. A seperate directory =(~/.emacs-meta)= is configured
   for =Meta= information files (backups, temporary files, etc.)

*** Metafiles

    First, we need to define the  =metafiles-dir= values.

    #+BEGIN_SRC emacs-lisp
      (defvar metafiles-dir
        "~/.emacs-meta" "Custom location for metadata.")
    #+END_SRC

    As this may be the first time I am running in this environment, the
    =metafiles-dir= directory may not actually exist. We go ahead and
    create it if it doesn't.

    #+BEGIN_SRC emacs-lisp
      (unless (file-exists-p metafiles-dir)
        (make-directory metafiles-dir))
    #+END_SRC

*** Temporary directory

    I can now set the Emacs temporary directory to be within the
    =metafiles-dir=, again creating it if necessary.

    #+BEGIN_SRC emacs-lisp
      (setq temporary-file-directory (concat metafiles-dir "/tmp/"))
      (unless (file-exists-p temporary-file-directory)
        (make-directory temporary-file-directory))
    #+END_SRC


** Additional Paths

   I add the =user-emacs-directory= to the load path here to ensure we can
   pick up the additional configuration files.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "/lisp"))
   #+END_SRC

   I also add all top-level subdirectories of =user-emacs-directory=.

   #+BEGIN_SRC emacs-lisp
     (let ((default-directory user-emacs-directory))
       (normal-top-level-add-subdirs-to-load-path))
   #+END_SRC



*** Paths for meta-information

    I set up variables for all paths needed for storing things in the
    =meta-information= directory. By consolidating them all in one place
    (and using the variables later), I have an easier time keeping track of
    them and maintaining them.

    | Variable         | Purpose                                                                                                   |
    |------------------+-----------------------------------------------------------------------------------------------------------|
    | =meta-config=    | Location of no-littering's etc directory                                                                  |
    | =meta-data=      | Location of no-littering's var directory                                                                  |
    | =meta-saveplace= | Name of the file that records the =save-place-alist=, which stores the location of point in visited files |
    | =meta-backup=    | Location for backup files                                                                                 |
    | =meta-bookmarks= | Bookmarks file.                                                                                           |
    | =meta-savehist=  | File used by =savehist= where minibuffer history is saved to and loaded                                   |
    | =meta-recent=    | File to save the recent list into                                                                         |
    | =meta-saves=     | Prefix to use for auto-save files                                                                         |
    | =meta-ido=       | File in which the =ido= state is saved between invocations                                                |
    | =meta-tramp=     | File used for =tramp= persistence                                                                         |

    #+BEGIN_SRC emacs-lisp
      (defvar meta-config (concat metafiles-dir "/etc/")
        "Location of etc directory for no-littering.")
      (defvar meta-data (concat metafiles-dir "/var/")
        "Location of var directory for no-littering.")
      (defvar meta-saveplace (concat metafiles-dir "/places")
        "Name of the file that records save-place-alist.")
      (defvar meta-bookmarks (concat metafiles-dir "/bookmarks")
        "Location for bookmarks file.")
      (defvar meta-savehist (concat metafiles-dir "/savehist")
        "File used by savehist where minibuffer history is saved to and loaded.")
      (defvar meta-recent (concat metafiles-dir "/recentf")
        "File to save the recent list into.")
      (defvar meta-saves (concat metafiles-dir "/auto-save-list/.saves-")
        "Prefix to use for auto-save files.")
      (defvar meta-ido (concat metafiles-dir "/ido.last")
        "File in which the ido state is saved between invocations.")
      (defvar meta-tramp (concat metafiles-dir "/tramp")
        "File used for tramp persistence.")
      (defvar meta-url (concat metafiles-dir "/url")
        "Directory for url files.")
    #+END_SRC

    Having set all of the known paths, we use the =no-littering= package to
    attempt to catch the rest.

    #+BEGIN_SRC emacs-lisp
      (use-package no-littering
        :ensure t
        :demand t
        :init
        (setq no-littering-etc-directory meta-config
              no-littering-var-directory meta-data))
    #+END_SRC

*** System and user specific configuration

    I run the same configuration on several machines. Different machines
    have different capabilities as well as different file system
    layouts. To handle this situation, I load system specific files based
    on the name of the machine. I also load in a file based on user name,
    to handle additional environments.

    My previous implementation for handling this had become too complicated
    and had some trouble with ordering. So, I have simplified things by
    having several functions.

**** Custom Settings

     Keep emacs Custom-settings in separate file. I previously converted
     most of my variable assignmets to setting custom variables during
     init. Therefore, the contents of the =custom.el= file is mostly
     populated from configuration.

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(custom-file (expand-file-name "custom.el" user-emacs-directory)))
     #+END_SRC

**** Basic loading function

     #+BEGIN_SRC emacs-lisp
       (defun jme:load (directory base)
         "Look for files located in DIRECTORY whose base name is BASE.

       Check the base name against several extensions.  If a file with
       that name exists, then load it."
         (let ((literate      (expand-file-name (concat base ".org") directory))
               (encrypted-org (expand-file-name (concat base ".org.gpg") directory))
               (plain         (expand-file-name (concat base ".el") directory))
               (encrypted-el  (expand-file-name (concat base ".el.gpg") directory)))
           (cond
            ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
            ((file-exists-p encrypted-el)  (load encrypted-el))
            ((file-exists-p literate)      (org-babel-load-file literate))
            ((file-exists-p plain)         (load plain)))))
     #+END_SRC

**** Private settings

     Personal information that should not be shared is kept in a private
     file.

     #+BEGIN_SRC emacs-lisp
       (jme:load user-emacs-directory ".private")
     #+END_SRC

**** OS-specific settings

     Settings specific to machine type are kept in their own settings file.

     #+BEGIN_SRC emacs-lisp
       (let* ((system-type-name (symbol-name system-type))
              (base-name (replace-regexp-in-string "/" "-" system-type-name)))
         (jme:load user-emacs-directory base-name))
     #+END_SRC

**** Hostname-specific settings

     Settings specific to a particular machine, identified by host name,
     are stored in their own settings file.

     #+BEGIN_SRC emacs-lisp
       (let ((host-name-base (car (split-string (system-name) "\\."))))
         (jme:load user-emacs-directory host-name-base))
     #+END_SRC

**** User-specific settings

     #+BEGIN_SRC emacs-lisp
       (jme:load user-emacs-directory user-login-name)
     #+END_SRC

**** Custom configuration

     Finally, we load any settings set by ~customize~.

     #+BEGIN_SRC emacs-lisp
       (load custom-file)
     #+END_SRC

** General Emacs Settings

   There are a number of configuration items I tend to look at as basic
   configuration. There is a fine line between what is a /package/ and what
   is just part of Emacs, especially at the rate things are being included
   in the /official/ distribution.

*** Window sizing

    When using a =window-system=, which I most often do, I like to start
    Emacs with a specific window size and position. This code accomplishes
    that.

    First, we need to set up the window sizing.

    #+BEGIN_SRC emacs-lisp
      (eval-when-compile
        (defvar emacs-min-top)
        (defvar emacs-min-left)
        (defvar emacs-min-height)
        (defvar emacs-min-width))

      (if window-system
          (unless noninteractive
            (defvar emacs-min-top 22)
            (defvar emacs-min-left 5)
            (defvar emacs-min-height (if (= 1050 (x-display-pixel-height)) 55 64))
            (defvar emacs-min-width 100)))
    #+END_SRC

    This function resets the window to its minimal position.

    #+BEGIN_SRC emacs-lisp
      (defun jme:emacs-min ()
        "Reset frame size to minumum."
        (interactive)
        (set-frame-parameter (selected-frame) 'fullscreen nil)
        (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'top emacs-min-top)
        (set-frame-parameter (selected-frame) 'left emacs-min-left)
        (set-frame-parameter (selected-frame) 'height emacs-min-height)
        (set-frame-parameter (selected-frame) 'width emacs-min-width))
    #+END_SRC

    This function does the opposite of the above. It sets the window to
    maximum position.

    #+BEGIN_SRC emacs-lisp
      (defun jme:emacs-max ()
        "Reset frame size to maximum."
        (interactive)
        (if t
            (progn
              (set-frame-parameter (selected-frame) 'fullscreen 'fullboth)
              (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
              (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil))
          (set-frame-parameter (selected-frame) 'top 26)
          (set-frame-parameter (selected-frame) 'left 2)
          (set-frame-parameter (selected-frame) 'width
                               (floor (/ (float (x-display-pixel-width)) 9.15)))
          (if (= 1050 (x-display-pixel-height))
              (set-frame-parameter (selected-frame) 'height
                                   (if (>= emacs-major-version 24)
                                       66
                                     55))
            (set-frame-parameter (selected-frame) 'height
                                 (if (>= emacs-major-version 24)
                                     75
                                   64)))))
    #+END_SRC

    One last function to give me the ability to toggle between the two.

    #+BEGIN_SRC emacs-lisp
      (defun jme:emacs-toggle-size ()
        "Toggle between minimum and maximum size of frame."
        (interactive)
        (if (> (cdr (assq 'width (frame-parameters))) 100)
            (jme:emacs-min)
          (jme:emacs-max)))
    #+END_SRC

    I start off with Emacs in its minimal state when starting up. Since
    moving to the =mac= Emacs port on my Apple machines, as opposed to the
    =ns= version, I don't really use the toggle much anymore. Instead I use
    the mac fullscreen mode.

    #+BEGIN_SRC emacs-lisp
                                              ;      (if window-system
                                              ;          (add-hook 'after-init-hook 'jme:emacs-min))
    #+END_SRC

*** Coding system

    I am a fan of UTF-8. Make sure everything is set up to handle it.

    | Variable                     | Value   | Description          |
    |------------------------------+---------+----------------------|
    | =set-terminal-coding-system= | =utf-8= | terminal output      |
    | =set-terminal-coding-system= | =utf-8= | terminal input       |
    | =perfer-coding-system=       | =utf-8= | set preferred coding |

    #+BEGIN_SRC emacs-lisp
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (prefer-coding-system 'utf-8)
      (when (display-graphic-p)
        (custom-set-variables '(x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))))
    #+END_SRC

*** Interface settings

    I most often have the audio on my machines muted, so use the visible bell
    instead of beeps. Who likes beeps anyway?

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(visible-bell t))
    #+END_SRC

    Make sure I can see what it is that I am typing. This setting is the
    number of seconds to pause before unfinished commands are echoed. I
    find the default of 1 second a bit slow.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(echo-keystrokes 0.1))
    #+END_SRC

    I am not a big fan of overloading the arrow keys. Plus they are just too
    far away from my fingers to be useful. Don't use the shift+arrows for mark.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(shift-select-mode nil))
    #+END_SRC

    Use point instead of click with mouse yank.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(mouse-yank-at-point t))
    #+END_SRC

    While I no longer have a machine with a mouse connected (only trackpads
    now), I still use swipe-type scrolling which I would like to be smooth.

    These settings handle one line at a time, disable scrolling
    acceleration and scroll the window under the mouse.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(scroll-step 1)
                            '(mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
                            '(mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
                            '(mouse-wheel-follow-mouse 't))                 ; scroll window under mouse
    #+END_SRC

    Truncate lines in windows narrower than the frame. Providing an integer
    here specifies to truncate lines in each window narrower thant the full
    frame width, provided the total window width in column units is less
    than that integer; otherwise respect the value of =truncate-lines=.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(truncate-partial-width-windows 50))
    #+END_SRC

    Set the default tab stop.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(tab-width 4))
    #+END_SRC

    Never put tabs in files, use spaces instead. If, for some reason, a real
    tab is needed, use =C-q C-i= to insert one.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(indent-tabs-mode nil))
    #+END_SRC

    I want to always go to the next indent level when hitting return.

    #+BEGIN_SRC emacs-lisp
      (bind-key "RET" 'newline-and-indent)
    #+END_SRC

    Add newlines to the end of the file if I naviagate past it.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(next-line-add-newlines t))
    #+END_SRC

    Set the column that triggers fill

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(fill-column 75))
    #+END_SRC

    Turn on auto fill for text files.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'text-mode-hook 'turn-on-auto-fill)
    #+END_SRC

    Allow narrowing.

    #+BEGIN_SRC emacs-lisp
      (put 'narrow-to-defun 'disabled nil)
      (put 'narrow-to-page 'disabled nil)
      (put 'narrow-to-region 'disabled nil)
    #+END_SRC

*** Visual tweaks

    Unlike a number of people, I do not mind the menu bar if I am actually
    using a window system of some kind. It is not that I use it often, but
    it does not get in my way much either. So, I check to see if I am using
    a window system and disable it if not. Turns out that this is still
    annoying when the window system does not support global menus as is the
    case when I am running on my chromebook with i3wm. Still need a
    solution for that case.

    #+BEGIN_SRC emacs-lisp
      (if (eq window-system 'nil)
          (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
        (if (fboundp 'menu-bar-mode) (menu-bar-mode 1)))
    #+END_SRC

    The toolbar, however, is completely useless to me, so I always disable it.

    #+BEGIN_SRC emacs-lisp
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    #+END_SRC

    Likewise, scrollbars offer no value.

    #+BEGIN_SRC emacs-lisp
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    #+END_SRC

    Don't show the startup message.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(inhibit-startup-message t)
                            '(inhibit-startup-echo-area-message (user-login-name)))
    #+END_SRC

    Visually indicate empty lines after the buffer end. This is shown as a
    fringe bitmap in the left edge.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(indicate-empty-lines t))
    #+END_SRC

**** Icon support

     #+BEGIN_SRC emacs-lisp
       (use-package all-the-icons
         :ensure t)
     #+END_SRC

**** Modeline

     I refer to my modeline quite often. It is very easy for it to get too
     cluttered, it is expensive real estate.

     Show the line:column number.

     #+BEGIN_SRC emacs-lisp
       (line-number-mode 1)
       (column-number-mode 1)
     #+END_SRC

     Also, show the size of the file.

     #+BEGIN_SRC emacs-lisp
       (size-indication-mode 1)
     #+END_SRC

***** Battery information

      I have opted for a simpler and 'clearer' solution to displaying
      battery information utilizing the `fancy-battery` package.

      #+BEGIN_SRC emacs-lisp
        (use-package fancy-battery
          :ensure t
          :config
          (add-hook 'after-init-hook #'fancy-battery-mode))
      #+END_SRC

***** Time

      I often run emacs in a fullscreen fashion that does not display the
      system clock on my desktop. However, I often refer to the clock, thus
      I add it to the modeline. The =display-time= functionality in Emacs
      is quite robust and can potentially display much more information
      than just the time. I configure it here to my liking.

      #+BEGIN_SRC emacs-lisp
        (custom-set-variables '(display-time-default-load-average nil)  ; Don't display load
                              '(display-time-day-and-date nil)          ; Don't display date
                              '(display-time-format "%l:%M%p"))
        (add-hook 'after-init-hook #'display-time-mode)
      #+END_SRC

*** Miscellaneous

    Add newline to end of file on save.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(require-final-newline t))
    #+END_SRC

    Make Emacs use the clipboard

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(select-enable-clipboard t))
    #+END_SRC

    Prefix used for generating the auto save file names.

    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(auto-save-list-file-prefix meta-saves))
    #+END_SRC

    Use "y" in place of "yes", who wants to type all of those extra characters?

    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

**** Bookmarks

     Save bookmarks into their own file in the meta information directory.

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(bookmark-default-file meta-bookmarks))
     #+END_SRC

**** Backup

     I like all of my backup copies of files to be in a common location.

     Configure where the backups should go.

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(backup-directory-alist (quote ((".*" . "~/.emacs-meta/backups/")))))
     #+END_SRC

     I like to use version numbers for the backup files. Set the number of
     newest versions and oldest versions to keep when a new numbered backup
     is made. I also don't care about the deletion of excess backup
     versions, so do that silently. Also, I like to use copying to create
     backups for files that are linked, instead of renaming.

     | Variable                        | Value | Description                                                          |
     |---------------------------------+-------+----------------------------------------------------------------------|
     | =version-control=               | =t=   | Control use of version numbers for backup files                      |
     | =kept-new-versions=             | =2=   | Number of newest versions to keep when a new numbered backup is made |
     | =kept-old-versions=             | =2=   | Number of oldest versions to keep when a new numbered backup is made |
     | =delete-old-versions=           | =t=   | When set to =t=, delete excess backup versions silently              |
     | =backup-by-copying-when-linked= | =t=   | Use copying to create backups for files with multiple names          |

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables
        '(version-control t)
        '(kept-new-versions 2)
        '(kept-old-versions 2)
        '(delete-old-versions t)
        '(backup-by-copying-when-linked t))
     #+END_SRC

**** URL Related

     Make sure to store URL related stuff in the right place.

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(url-cookie-file (concat meta-url "/cookies"))
                             '(url-cache-directory (concat temporary-file-directory "url/cache")))
     #+END_SRC

*** Global mode settings

**** Auto-revert

     Revert buffers when they change on disk.

     #+BEGIN_SRC emacs-lisp
       (global-auto-revert-mode 1)
     #+END_SRC

     Auto-refresh dired buffers.

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(global-auto-revert-non-file-buffers t))
     #+END_SRC

     But.. don't announce reversion of buffer

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables '(auto-revert-verbose nil))
     #+END_SRC

**** Git gutter

     Git gutter is a nice little utility that adds markers in the fringe to
     denote changes in a file. I like this everywhere, so I turn it on
     globally.

     #+BEGIN_SRC emacs-lisp
       (use-package git-gutter-fringe
         :ensure t
         :diminish git-gutter-mode
         :config
         (progn
           (custom-set-variables '(git-gutter:lighter " GG"))
           (global-git-gutter-mode)))
     #+END_SRC

**** Git messenger

     #+BEGIN_SRC emacs-lisp
       (use-package git-messenger
         :ensure t
         :commands git-messenger:popup-message
         :bind ("C-x v p" . git-messenger:popup-message))
     #+END_SRC

**** Recentf

     Save recently used files. This turns on the "Open Recent" submenu
     which is displayed in the "File" menu, containing a list of files that
     were operated on recently.

     I use the following settings for this mode:

     | variable                 |         value | description                       |
     |--------------------------+---------------+-----------------------------------|
     | =recentf-save-file=      | =meta-recent= | File to save the recent list into |
     | =recent-max-saved-items= |           100 | Max number of items saved         |
     | =recent-max-menu-items=  |            15 | Max number of items in menu       |

     Since the loading of the recent file and cleanup can take some time, I
     turn it on once things are idle.

     #+BEGIN_SRC emacs-lisp
       (use-package recentf
         :config
         (progn
           (custom-set-variables
            '(recentf-save-file meta-recent)
            '(recentf-max-saved-items 100)
            '(recentf-max-menu-items 15))
           (recentf-mode t)))
     #+END_SRC

**** Savehist

     Save minibuffer history. The minibuffer history is saved periodically
     (every 300 seconds, in this case) and when exiting Emacs. I use
     =savehist-file= to specify the filename (in the meta information
     directory) where the history should be stored. Additionally, I have it
     set to save:

     | History type         | Description                                        |
     |----------------------+----------------------------------------------------|
     | =search-ring=        | List of search string sequences                    |
     | =regexp-search-ring= | List of regular expression search string sequences |

     #+BEGIN_SRC emacs-lisp
       (use-package savehist
         :config
         (progn
           (custom-set-variables '(savehist-additional-variables
                                   '(kill-ring search-ring regexp-search-ring))
                                 '(savehist-autosave-interval 300)
                                 '(savehist-file meta-savehist)
                                 '(history-delete-duplicates t))
           (savehist-mode t)))
     #+END_SRC

**** Saveplace

     Preserve the location of point in file when saving files.

     I specify the name of the file that records saveplace information, so
     the contents go into the =meta= area and activate it for all buffers.

     #+BEGIN_SRC emacs-lisp
       (use-package saveplace
         :init
         (progn
           (custom-set-variables '(save-place-file meta-saveplace))
           (save-place-mode t)))
     #+END_SRC

**** Undo-tree-mode

     =undo-tree-mode= replaces Emacs' standard undo feature with a more
     powerful, yet easier to user version, that treats the undo history as
     what it is: a tree.

     If a specific mode is not compatible with =undo-tree-mode=, it can be
     added to the list =undo-tree-incompatible-major-modes=.

     Enable =undo-tree-mode= globally.

     #+BEGIN_SRC emacs-lisp
       (use-package undo-tree
         :ensure t
         :diminish undo-tree-mode
         :config
         (progn
           (custom-set-variables '(undo-tree-visualizer-timestamps t)
                                 '(undo-tree-visualizer-diff t))
           (global-undo-tree-mode)))
     #+END_SRC

**** Whitespace

     I like to see whitespace in files. I find this helps with both
     organization and formatting. I use the following style for whitespace
     visualization:

     | Style            | Description                           |
     |------------------+---------------------------------------|
     | face             | enable all visualization via faces    |
     | trailing         | trailing blanks                       |
     | space-before-tab | SPACEs before TAB                     |
     | space-after-tab  | 8 or more SPACEs after a TAB          |
     | indentation      | 8 or more SPACEs at beginning of line |

     I also specify the column beyond which the line is highlighted.

     #+BEGIN_SRC emacs-lisp
       (use-package whitespace
         :diminish global-whitespace-mode
         :config
         (progn
           (custom-set-variables '(whitespace-style '(face trailing space-before-tab
                                                           indentation space-after-tab))
                                 '(whitespace-line-column 80))
           (global-whitespace-mode 1)))
     #+END_SRC

**** Winner

     Winner mode is a minor mode which keeps a history of changes to window
     configurations. This allows you to easily undo (=winner-undo=) and
     redo (=winner-redo=) window configurations.

     #+BEGIN_SRC emacs-lisp
       (use-package winner
         :ensure t
         :if (not noninteractive)
         :demand t
         :config (winner-mode 1))
     #+END_SRC


* Theme Configuration

** Custom Themes

   I tend to like playing around with different color themes. Sometimes
   this is based on mood, sometimes it is based on environment. These
   themes go into their own directory.

   #+BEGIN_SRC emacs-lisp
     (setq custom-theme-directory (concat user-emacs-directory "themes"))
   #+END_SRC

   Support easy switching of themes via helm.

   #+BEGIN_SRC emacs-lisp
     (use-package helm-themes
       :ensure t
       :after helm)
   #+END_SRC

** Fonts

   I have moved to using the =Adobe Source Code Pro= font. More information
   may be found on Source Code Pro can be found [[http://blog.typekit.com/2012/09/24/source-code-pro/][here]].

   Two separate fonts are possible, one for normal use and the other for
   use in presentation mode. Define some variables to hold them.

   #+BEGIN_SRC emacs-lisp
     (defvar jme:default-font (face-font 'default)
       "Default font to use.")
     (defvar jme:presentation-font (face-font 'default)
       "Font to use for presentations.")
   #+END_SRC

** Load custom theme

*** Org source blocks

    Color source blocks in org to make them stand out.

    See [[http://www.howardism.org/Technical/LP/dot-emacs.html][Howard Abrams Emacs Config]].

    #+BEGIN_SRC emacs-lisp
      (defun jme:org-src-color-blocks-light ()
        "Colors the block headers and footers to make them stand out more for lighter themes."
        (interactive)
        (custom-set-faces
         '(org-block-begin-line
           ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
         '(org-block-background
           ((t (:background "#FFFFEA"))))
         '(org-block-end-line
           ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))))

      (defun jme:org-src-color-blocks-dark ()
        "Colors the block headers and footers to make them stand out more for dark themes."
        (interactive)
        (custom-set-faces
         '(org-block-begin-line
           ((t (:foreground "#008ED1" :background "#002E41"))))
         '(org-block-background
           ((t (:background "#111111"))))
         '(org-block-end-line
           ((t (:foreground "#008ED1" :background "#002E41"))))))
    #+END_SRC

*** Presentation and Default theme

    Under certain situations, changing the theme is desirable, specifically
    when projecting on a larger screen. The following provides functions
    for switching themes. I have updated this to use the sanityinc versions
    of Chris Kempson's tommorow themes.

    Need to make sure to capture the default cursor color so we can switch
    it when appropriate.

    hide-mode-line provides a way for me to hide the mode line during
    presentations.

    #+BEGIN_SRC emacs-lisp
      (use-package material-theme
        :ensure t)

      (defun use-presentation-theme ()
        "Switch to presentation theme."
        (interactive)
        (load-theme 'material-light t)
        (when (boundp 'jme:presentation-font)
          (set-frame-font jme:presentation-font :frames nil)
          (set-face-attribute 'default nil :font jme:presentation-font))
        (setq default-cursor-color (cdr (assoc 'cursor-color (frame-parameters)))))

      (defun use-default-theme ()
        "Switch to the default theme."
        (interactive)
        (load-theme 'material t)
        (when (boundp 'jme:default-font)
          (set-frame-font jme:default-font :frames nil)
          (set-face-attribute 'default nil :font jme:default-font))
        (setq default-cursor-color (cdr (assoc 'cursor-color (frame-parameters)))))

      (defun toggle-presentation-mode ()
        "Toggle between presentation and default theme."
        (interactive)
        (if (string= (frame-parameter nil 'font) jme:default-font)
            (use-presentation-theme)
          (use-default-theme)))

      (use-default-theme)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
                                              ;(use-package hide-mode-line)
    #+END_SRC

    For presentations themselves, provide org-present.

    #+BEGIN_SRC emacs-lisp
      ;; (use-package org-present
      ;;   :config (add-hook 'org-present-mode-hook
      ;;                     (lambda ()
      ;;                        (org-display-inline-images)
      ;;                        (hide-mode-line)
      ;;                        (use-presentation-theme)))
      ;;           (add-hook 'org-present-mode-quit-hook
      ;;                     (lambda ()
      ;;                        (org-remove-inline-images)
      ;;                        (use-default-theme)
      ;;                        (hide-mode-line))))
    #+END_SRC

** Spaceline

   Configure spaceline for mode-line theme. I am overly specific in
   toggling the segments. As I work to improve the way my mode line works
   (which is a continuous effort), I find it best to be very specific about
   which features to turn on/off.

   #+BEGIN_SRC emacs-lisp
     (use-package spaceline-all-the-icons :after spaceline
       :ensure t
       :config
       (progn
         (dolist (s '((jme:spaceline-read-only "#4271AE" "Read only buffer face.")
                      (jme:spaceline-modified "#F36C60" "Modified buffer face.")
                      (jme:spaceline-unmodified "#78909C" "Unmodified buffer face.")))
           (eval `(defface ,(nth 0 s)
                    `((t (:background ,(nth 1 s)
                                      :foreground "#3E3D31"
                                      :inherit 'mode-line)))
                    ,(nth 2 s)
                    :group 'spaceline)))

         (defun jme:spaceline-highlight-face-modified ()
           "Set the highlight face depending on the buffer modified status.
              Set `spaceline-highlight-face-func' to
              `spaceline-highlight-face-modified' to use this."
           (cond
            (buffer-read-only 'jme:spaceline-read-only)
            ((buffer-modified-p) 'jme:spaceline-modified)
            (t 'jme:spaceline-unmodified)))

         (setq-default spaceline-highlight-face-func 'jme:spaceline-highlight-face-modified)
         (setq-default spaceline-all-the-icons-separator-type 'cup)
         (spaceline-toggle-all-the-icons-modified-on)
         (spaceline-toggle-all-the-icons-bookmark-off)
         (spaceline-toggle-all-the-icons-dedicated-off)
         (spaceline-toggle-all-the-icons-window-number-off)
         (spaceline-toggle-all-the-icons-eyebrowse-workspace-off)
         (spaceline-toggle-all-the-icons-buffer-size-on)
         (spaceline-toggle-all-the-icons-projectile-on)
         (spaceline-toggle-all-the-icons-mode-icon-on)
         (spaceline-toggle-all-the-icons-buffer-id-on)
         (spaceline-toggle-all-the-icons-buffer-path-off)
         (spaceline-toggle-all-the-icons-process-off)
         (spaceline-toggle-all-the-icons-position-on)
         (spaceline-toggle-all-the-icons-region-info-on)
         (spaceline-toggle-all-the-icons-fullscreen-off)
         (spaceline-toggle-all-the-icons-text-scale-on)
         (spaceline-toggle-all-the-icons-multiple-cursors-off)
         (spaceline-toggle-all-the-icons-narrowed-on)
         (spaceline-toggle-all-the-icons-vc-icon-off)
         (spaceline-toggle-all-the-icons-vc-status-on)
         (spaceline-toggle-all-the-icons-git-status-off)
         (spaceline-toggle-all-the-icons-git-ahead-off)
         (spaceline-toggle-all-the-icons-flycheck-status-on)
         (spaceline-toggle-all-the-icons-flycheck-status-info-off)
         (spaceline-toggle-all-the-icons-package-updates-off)
         (spaceline-toggle-all-the-icons-org-clock-current-task-on)
         (spaceline-toggle-all-the-icons-hud-off)
         (spaceline-toggle-all-the-icons-buffer-position-off)
         (spaceline-toggle-all-the-icons-battery-status-on)
         (spaceline-toggle-all-the-icons-time-on)
         (spaceline-toggle-all-the-icons-which-function-on)
         (spaceline-toggle-all-the-icons-temperature-off)
         (spaceline-toggle-all-the-icons-weather-off)
         (spaceline-toggle-all-the-icons-minor-modes-off)
         (spaceline-toggle-all-the-icons-nyan-cat-off)
         (spaceline-all-the-icons-theme)
         (spaceline-all-the-icons--setup-paradox)))
   #+END_SRC


** Cleanup

   Whitespace cleanup can be dangerous if it changes the content of the
   file. Some changes are guaranteed to be safe, which this function sticks
   to, allowing it to be safe for a =before-save-hook=. (see [[http://whattheemacsd.com/buffer-defuns.el-01.html][this article]].)

   #+BEGIN_SRC emacs-lisp
     (defun jme:cleanup-buffer-safe ()
       "Perform a bunch of safe operations on the whitespace content of a buffer.
     Does not indent buffer, because it is used for a `before-save-hook', and that
     might be bad."
       (interactive)
       ;; (unless (member major-mode '("go-mode" "make-mode" "xml-mode" "GNUmakefile"))
       ;;   (untabify (point-min) (point-max)))
       (delete-trailing-whitespace)
       (set-buffer-file-coding-system 'utf-8))
   #+END_SRC

   If we want to be less careful when cleaning up, we can do that too.

   #+BEGIN_SRC emacs-lisp
     (defun jme:cleanup-buffer ()
       "Perform a bunch of operations on the whitespace content of a buffer.
     Including indent-buffer, which should not be called automatically on save."
       (interactive)
       (jme:cleanup-buffer-safe)
       (indent-region (point-min) (point-max)))
   #+END_SRC

   Make sure we hook this into our save process.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'jme:cleanup-buffer-safe)
   #+END_SRC

* Package Specific Settings

  Individual package specific settings are configured in a separate file.

  #+BEGIN_SRC emacs-lisp
    (jme:load user-emacs-directory "packages")
  #+END_SRC

* Footer

  Add in the expected Emacs module footer.

  #+BEGIN_SRC emacs-lisp
    (provide 'init-ext)
    ;;; init-ext.el ends here
  #+END_SRC
